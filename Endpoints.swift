// 
// Endpoint definitions generated by Swako
//

public struct Endpoints {

    public struct User_CreateWithArray {

        // Creates list of users with given input array
        //
        public struct Post {
            typealias Response = Void

            var path: String {
                return "/user/createWithArray"
            }

            private let body: [User] // List of user object

            public init(body: [User]) {
                self.body = body
            }
            
            var parameters: [String: Any] {
                return [
                    "body": body,
                ]
            }
        }
    }

    public struct Store_Order {

        // Place an order for a pet
        //
        public struct Post {
            typealias Response = Order

            var path: String {
                return "/store/order"
            }

            private let body: Order // order placed for purchasing the pet

            public init(body: Order) {
                self.body = body
            }
            
            var parameters: [String: Any] {
                return [
                    "body": body,
                ]
            }
        }
    }

    public struct Pet_PetId {

        // Updates a pet in the store with form data
        //
        public struct Post {
            typealias Response = Void

            var path: String {
                return "/pet/\(petId)"
            }

            private let petId: Int // ID of pet that needs to be updated
            private let name: String // Updated name of the pet
            private let status: String // Updated status of the pet

            public init(petId: Int, name: String, status: String) {
                self.petId = petId
                self.name = name
                self.status = status
            }
            
            var parameters: [String: Any] {
                return [
                    "petId": petId,
                    "name": name,
                    "status": status,
                ]
            }
        }
        // Find pet by ID
        //
        // Returns a single pet
        public struct Get {
            typealias Response = Pet

            var path: String {
                return "/pet/\(petId)"
            }

            private let petId: Int // ID of pet to return

            public init(petId: Int) {
                self.petId = petId
            }
            
            var parameters: [String: Any] {
                return [
                    "petId": petId,
                ]
            }
        }
        // Deletes a pet
        //
        public struct Delete {
            typealias Response = Void

            var path: String {
                return "/pet/\(petId)"
            }

            private let api_key: String 
            private let petId: Int // Pet id to delete

            public init(api_key: String, petId: Int) {
                self.api_key = api_key
                self.petId = petId
            }
            
            var parameters: [String: Any] {
                return [
                    "api_key": api_key,
                    "petId": petId,
                ]
            }
        }
    }

    public struct Pet {

        // Update an existing pet
        //
        public struct Put {
            typealias Response = Void

            var path: String {
                return "/pet"
            }

            private let body: Pet // Pet object that needs to be added to the store

            public init(body: Pet) {
                self.body = body
            }
            
            var parameters: [String: Any] {
                return [
                    "body": body,
                ]
            }
        }
        // Add a new pet to the store
        //
        public struct Post {
            typealias Response = Void

            var path: String {
                return "/pet"
            }

            private let body: Pet // Pet object that needs to be added to the store

            public init(body: Pet) {
                self.body = body
            }
            
            var parameters: [String: Any] {
                return [
                    "body": body,
                ]
            }
        }
    }

    public struct Store_Inventory {

        // Returns pet inventories by status
        //
        // Returns a map of status codes to quantities
        public struct Get {
            typealias Response = Void

            var path: String {
                return "/store/inventory"
            }


            public init() {
            }
            
            var parameters: [String: Any] {
                return [:]
            }
        }
    }

    public struct User_Username {

        // Updated user
        //
        // This can only be done by the logged in user.
        public struct Put {
            typealias Response = Void

            var path: String {
                return "/user/\(username)"
            }

            private let username: String // name that need to be updated
            private let body: User // Updated user object

            public init(username: String, body: User) {
                self.username = username
                self.body = body
            }
            
            var parameters: [String: Any] {
                return [
                    "username": username,
                    "body": body,
                ]
            }
        }
        // Get user by user name
        //
        public struct Get {
            typealias Response = User

            var path: String {
                return "/user/\(username)"
            }

            private let username: String // The name that needs to be fetched. Use user1 for testing. 

            public init(username: String) {
                self.username = username
            }
            
            var parameters: [String: Any] {
                return [
                    "username": username,
                ]
            }
        }
        // Delete user
        //
        // This can only be done by the logged in user.
        public struct Delete {
            typealias Response = Void

            var path: String {
                return "/user/\(username)"
            }

            private let username: String // The name that needs to be deleted

            public init(username: String) {
                self.username = username
            }
            
            var parameters: [String: Any] {
                return [
                    "username": username,
                ]
            }
        }
    }

    public struct User_Login {

        // Logs user into the system
        //
        public struct Get {
            typealias Response = Void

            var path: String {
                return "/user/login"
            }

            private let username: String // The user name for login
            private let password: String // The password for login in clear text

            public init(username: String, password: String) {
                self.username = username
                self.password = password
            }
            
            var parameters: [String: Any] {
                return [
                    "username": username,
                    "password": password,
                ]
            }
        }
    }

    public struct Store_Order_OrderId {

        // Find purchase order by ID
        //
        // For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions
        public struct Get {
            typealias Response = Order

            var path: String {
                return "/store/order/\(orderId)"
            }

            private let orderId: Int // ID of pet that needs to be fetched

            public init(orderId: Int) {
                self.orderId = orderId
            }
            
            var parameters: [String: Any] {
                return [
                    "orderId": orderId,
                ]
            }
        }
        // Delete purchase order by ID
        //
        // For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors
        public struct Delete {
            typealias Response = Void

            var path: String {
                return "/store/order/\(orderId)"
            }

            private let orderId: Int // ID of the order that needs to be deleted

            public init(orderId: Int) {
                self.orderId = orderId
            }
            
            var parameters: [String: Any] {
                return [
                    "orderId": orderId,
                ]
            }
        }
    }

    public struct Pet_FindByStatus {

        // Finds Pets by status
        //
        // Multiple status values can be provided with comma separated strings
        public struct Get {
            typealias Response = Array<Pet>

            var path: String {
                return "/pet/findByStatus"
            }

            private let status: [String] // Status values that need to be considered for filter

            public init(status: [String]) {
                self.status = status
            }
            
            var parameters: [String: Any] {
                return [
                    "status": status,
                ]
            }
        }
    }

    public struct User_Logout {

        // Logs out current logged in user session
        //
        public struct Get {
            typealias Response = Void

            var path: String {
                return "/user/logout"
            }


            public init() {
            }
            
            var parameters: [String: Any] {
                return [:]
            }
        }
    }

    public struct User_CreateWithList {

        // Creates list of users with given input array
        //
        public struct Post {
            typealias Response = Void

            var path: String {
                return "/user/createWithList"
            }

            private let body: [User] // List of user object

            public init(body: [User]) {
                self.body = body
            }
            
            var parameters: [String: Any] {
                return [
                    "body": body,
                ]
            }
        }
    }

    public struct User {

        // Create user
        //
        // This can only be done by the logged in user.
        public struct Post {
            typealias Response = Void

            var path: String {
                return "/user"
            }

            private let body: User // Created user object

            public init(body: User) {
                self.body = body
            }
            
            var parameters: [String: Any] {
                return [
                    "body": body,
                ]
            }
        }
    }

    public struct Pet_PetId_UploadImage {

        // uploads an image
        //
        public struct Post {
            typealias Response = ApiResponse

            var path: String {
                return "/pet/\(petId)/uploadImage"
            }

            private let petId: Int // ID of pet to update
            private let additionalMetadata: String // Additional data to pass to server
            private let file: File is not supported // file to upload

            public init(petId: Int, additionalMetadata: String, file: File is not supported) {
                self.petId = petId
                self.additionalMetadata = additionalMetadata
                self.file = file
            }
            
            var parameters: [String: Any] {
                return [
                    "petId": petId,
                    "additionalMetadata": additionalMetadata,
                    "file": file,
                ]
            }
        }
    }

    public struct Pet_FindByTags {

        // Finds Pets by tags
        //
        // Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.
        public struct Get {
            typealias Response = Array<Pet>

            var path: String {
                return "/pet/findByTags"
            }

            private let tags: [String] // Tags to filter by

            public init(tags: [String]) {
                self.tags = tags
            }
            
            var parameters: [String: Any] {
                return [
                    "tags": tags,
                ]
            }
        }
    }

}
