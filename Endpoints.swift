// 
// Endpoint definitions generated by Swako
//

public struct Endpoints {

    public struct User_CreateWithArray {
        public struct Post {
            typealias Response = Void

            var path: String {
                return "/user/createWithArray"
            }

            private let body: [User]

            public init(body: [User]) {
                self.body = body
            }
            
            var parameters: [String: Any] {
                return [
                    "body": body,
                ]
            }
        }
    }

    public struct Store_Order {
        public struct Post {
            typealias Response = Order

            var path: String {
                return "/store/order"
            }

            private let body: Order

            public init(body: Order) {
                self.body = body
            }
            
            var parameters: [String: Any] {
                return [
                    "body": body,
                ]
            }
        }
    }

    public struct Pet_PetId {
        public struct Post {
            typealias Response = Void

            var path: String {
                return "/pet/\(petId)"
            }

            private let petId: Int
            private let name: String
            private let status: String

            public init(petId: Int, name: String, status: String) {
                self.petId = petId
                self.name = name
                self.status = status
            }
            
            var parameters: [String: Any] {
                return [
                    "petId": petId,
                    "name": name,
                    "status": status,
                ]
            }
        }
        public struct Get {
            typealias Response = Pet

            var path: String {
                return "/pet/\(petId)"
            }

            private let petId: Int

            public init(petId: Int) {
                self.petId = petId
            }
            
            var parameters: [String: Any] {
                return [
                    "petId": petId,
                ]
            }
        }
        public struct Delete {
            typealias Response = Void

            var path: String {
                return "/pet/\(petId)"
            }

            private let api_key: String
            private let petId: Int

            public init(api_key: String, petId: Int) {
                self.api_key = api_key
                self.petId = petId
            }
            
            var parameters: [String: Any] {
                return [
                    "api_key": api_key,
                    "petId": petId,
                ]
            }
        }
    }

    public struct Pet {
        public struct Put {
            typealias Response = Void

            var path: String {
                return "/pet"
            }

            private let body: Pet

            public init(body: Pet) {
                self.body = body
            }
            
            var parameters: [String: Any] {
                return [
                    "body": body,
                ]
            }
        }
        public struct Post {
            typealias Response = Void

            var path: String {
                return "/pet"
            }

            private let body: Pet

            public init(body: Pet) {
                self.body = body
            }
            
            var parameters: [String: Any] {
                return [
                    "body": body,
                ]
            }
        }
    }

    public struct Store_Inventory {
        public struct Get {
            typealias Response = Void

            var path: String {
                return "/store/inventory"
            }


            public init() {
            }
            
            var parameters: [String: Any] {
                return [:]
            }
        }
    }

    public struct User_Username {
        public struct Put {
            typealias Response = Void

            var path: String {
                return "/user/\(username)"
            }

            private let username: String
            private let body: User

            public init(username: String, body: User) {
                self.username = username
                self.body = body
            }
            
            var parameters: [String: Any] {
                return [
                    "username": username,
                    "body": body,
                ]
            }
        }
        public struct Get {
            typealias Response = User

            var path: String {
                return "/user/\(username)"
            }

            private let username: String

            public init(username: String) {
                self.username = username
            }
            
            var parameters: [String: Any] {
                return [
                    "username": username,
                ]
            }
        }
        public struct Delete {
            typealias Response = Void

            var path: String {
                return "/user/\(username)"
            }

            private let username: String

            public init(username: String) {
                self.username = username
            }
            
            var parameters: [String: Any] {
                return [
                    "username": username,
                ]
            }
        }
    }

    public struct User_Login {
        public struct Get {
            typealias Response = Void

            var path: String {
                return "/user/login"
            }

            private let username: String
            private let password: String

            public init(username: String, password: String) {
                self.username = username
                self.password = password
            }
            
            var parameters: [String: Any] {
                return [
                    "username": username,
                    "password": password,
                ]
            }
        }
    }

    public struct Store_Order_OrderId {
        public struct Get {
            typealias Response = Order

            var path: String {
                return "/store/order/\(orderId)"
            }

            private let orderId: Int

            public init(orderId: Int) {
                self.orderId = orderId
            }
            
            var parameters: [String: Any] {
                return [
                    "orderId": orderId,
                ]
            }
        }
        public struct Delete {
            typealias Response = Void

            var path: String {
                return "/store/order/\(orderId)"
            }

            private let orderId: Int

            public init(orderId: Int) {
                self.orderId = orderId
            }
            
            var parameters: [String: Any] {
                return [
                    "orderId": orderId,
                ]
            }
        }
    }

    public struct Pet_FindByStatus {
        public struct Get {
            typealias Response = Array<Pet>

            var path: String {
                return "/pet/findByStatus"
            }

            private let status: [String]

            public init(status: [String]) {
                self.status = status
            }
            
            var parameters: [String: Any] {
                return [
                    "status": status,
                ]
            }
        }
    }

    public struct User_Logout {
        public struct Get {
            typealias Response = Void

            var path: String {
                return "/user/logout"
            }


            public init() {
            }
            
            var parameters: [String: Any] {
                return [:]
            }
        }
    }

    public struct User_CreateWithList {
        public struct Post {
            typealias Response = Void

            var path: String {
                return "/user/createWithList"
            }

            private let body: [User]

            public init(body: [User]) {
                self.body = body
            }
            
            var parameters: [String: Any] {
                return [
                    "body": body,
                ]
            }
        }
    }

    public struct User {
        public struct Post {
            typealias Response = Void

            var path: String {
                return "/user"
            }

            private let body: User

            public init(body: User) {
                self.body = body
            }
            
            var parameters: [String: Any] {
                return [
                    "body": body,
                ]
            }
        }
    }

    public struct Pet_PetId_UploadImage {
        public struct Post {
            typealias Response = ApiResponse

            var path: String {
                return "/pet/\(petId)/uploadImage"
            }

            private let petId: Int
            private let additionalMetadata: String
            private let file: File is not supported

            public init(petId: Int, additionalMetadata: String, file: File is not supported) {
                self.petId = petId
                self.additionalMetadata = additionalMetadata
                self.file = file
            }
            
            var parameters: [String: Any] {
                return [
                    "petId": petId,
                    "additionalMetadata": additionalMetadata,
                    "file": file,
                ]
            }
        }
    }

    public struct Pet_FindByTags {
        public struct Get {
            typealias Response = Array<Pet>

            var path: String {
                return "/pet/findByTags"
            }

            private let tags: [String]

            public init(tags: [String]) {
                self.tags = tags
            }
            
            var parameters: [String: Any] {
                return [
                    "tags": tags,
                ]
            }
        }
    }

}
