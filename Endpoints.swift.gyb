%{
import parse
import swifty_flavors as swift

endpoints = parse.parseEndpoints("sample.yml")
}%
// 
// Endpoint definitions generated by Swako
//

public struct Endpoints {

    % for endpoint in endpoints:
    % print ("Generating endpoint definition for " + endpoint.path)
    public struct ${swift.endpointTypeName(endpoint)} {

        % for method in endpoint.methods:
        % print ("\tmethod: " + method.method)
        % if method.summary != "":
        // ${method.summary}
        //
        % end
        % if method.description != "":
        // ${method.description}
        % end
        public struct ${swift.makePascalCase(method.method)} {
            % print (endpoint.path)
            typealias Response = ${swift.typeNameFromResponse(method.response)}

            var path: String {
                return "${swift.pathToPropertyInterpolation(endpoint.path)}"
            }

            % for parameter in method.parameters:
            private let ${parameter.name}: ${swift.typeNameFromParameter(parameter)} ${swift.descriptionComment(parameter.description)}
            % end

            % params = ", ".join([parameter.name + ": " + swift.typeNameFromParameter(parameter) for parameter in method.parameters])
            public init(${params}) {
                % for parameter in method.parameters:
                self.${parameter.name} = ${parameter.name}
                % end
            }
            
            var parameters: [String: Any] {
                % if len(method.parameters) > 0:
                return [
                    % for parameter in method.parameters:
                    "${parameter.name}": ${parameter.name},
                    % end
                ]
                % else:
                return [:]
                % end
            }
        }
        % end
    }

    % end
}
